#version 120

uniform float	time;
uniform vec2	coord;
uniform vec2	resolution;
uniform float	branches;

vec4 color(int r, int g, int b, int a)
{
	return (vec4(r / 255.0, g / 255.0, b / 255.0, a / 255.0));
}

void main()
{
	float	PI = 3.14159265358979323846264;
	float	radius = 0.42;
	float	a = cos(time * PI * 2) * 0.5;			// Rotation angle
	vec2	pos = (gl_FragCoord.xy - coord) / resolution;	// Point from center
	pos *= mat2(cos(a), -sin(a), sin(a), cos(a));	// Rotation
	float	truc = atan(pos.x / pos.y) * branches;	// Position on circle
	if (pos.y < 0)
		truc += mod(branches, 2.0) * PI;			// Symmetry
	float	dst = length(pos);
	if (branches > 1.f)
		dst *=  (cos(truc) + 3 ) / 2;	// Curved distance
	else
	{
		dst *= 1.3;
		dst += (cos(time * PI * 20) - 1) * 0.1;
	}
	float	col = 1 - pow(abs(dst - radius) * 10, 2);	// Glow factor
//		* (cos(time * 4 * PI) + 1.5);	// Time factor
	float	bright;
	if (branches > 1.f)
		bright = sin(fract(branches) * PI);
	else
		bright = (cos(time * PI * 20) + 1) * 0.5;

	gl_FragColor = color(0xff, 0xa8, 0xf7, 0xff) +
		color(0x5f, 0x5f, 0x5f, 0xff) * bright;
	gl_FragColor = gl_FragColor * (col + pow(bright, 3) * 0.5);
}
