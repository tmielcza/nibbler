#version 120

uniform float	time;
uniform vec2	coord;
uniform vec2	resolution;
uniform float	rot;
uniform float	size;

vec4 color(int r, int g, int b, int a)
{
	return (vec4(r / 255.0, g / 255.0, b / 255.0, a / 255.0));
}

void main()
{
	float	test = time;
	float	PI = 3.14159265358979323846264;
	float	radius = size;
	float	seg = 3;
	float	size = radius * sin(PI / seg);	// segment size / 2
	float	apot = radius * cos(PI / seg);	// segment distance from center
	vec2	pos = (gl_FragCoord.xy - coord) / resolution;	// Point from center

	float	d = 0;

	float	a = pow(1 - rot, 3) * PI * 2 / seg * 7;
	pos *= mat2(cos(a), -sin(a), sin(a), cos(a));	// Rotation

	for (float i = 1; i <= seg; i++)	// Computes distance from each segment
	{
		float	a = i / seg * (2 * PI);
		vec2	p = pos * mat2(cos(a), -sin(a), sin(a), cos(a));	// Put segment horizontaly
		float	dst = 0;

		if (p.x > -size && p.x < size)
		{
			dst = abs(apot - p.y);
		}
		else if (p.x <= -size)
		{
			dst = length(vec2(-size, apot) - p);
		}
		else if (p.x >= size)
		{
			dst = length(vec2(size, apot) - p);
		}
		if (d == 0 && dst != 0)
			d = dst;
		else if (dst != 0)
			d = min(d, dst);
	}

	float	col = 1 - pow(abs(d) * 30, 2);	// Glow factor
//		* (cos(time * 4 * PI) * 0.4 + 0.7);	// Time factor

	gl_FragColor = color(0x75, 0xee, 0xff, 0xff) * col;
}
