#version 120

uniform float	time;
uniform vec2	coord;
uniform vec2	resolution;

vec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )
{
    return a + b*cos( 6.28318*(c*t+d) );
}

vec4 color(float c)
{
	return (vec4(pal(c, vec3(0.6,0.6,0.8),vec3(0.6,0.6,0.8),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67)), 1.0));
}

void main()
{
	float debug = time;

	float	PI = 3.14159265358979323846264;
	float	seg = 4;
	vec2	pos = (gl_FragCoord.xy - coord) / resolution;	// Point from center
	pos = vec2(0.5, 0.5) + pos;
	pos = mod(pos, vec2(0.5, 0.5));
	pos -= vec2(0.25, 0.25);
//	pos = mod(vec2(0.25, 0.25) + pos, vec2(0.5, 0.5)) - mod(vec2(time / 5, time / 5), vec2(1, 1));

	float	d = 0;

//	float	a = PI / 4;

	for (float i = 1; i <= seg; i++)	// Computes distance from each segment
	{
		vec2	gridPos = (gl_FragCoord.xy - coord) / resolution;
		gridPos = floor(gridPos * 2);
		float	radius = 0.22;
		float	timeMod;
		if (gridPos.x == -1)
			timeMod = mod(time + 0.25 * (gridPos.x * 2 - gridPos.y - 1), 1);
		else if (gridPos.x == 0.)
			timeMod = mod(time + 0.25 * (gridPos.x * 2 + gridPos.y), 1);
		float	a0 = 0; // Square rotation angle
		if (timeMod < 0.5)
		{
			radius *= 1 - timeMod * 4;
			a0 = cos (timeMod * 4 * 4);
		}
		float	size = radius * sin(PI / seg);	// segment size / 2
		float	apot = radius * cos(PI / seg);	// segment distance from center
		vec2	p = pos * mat2(cos(a0), -sin(a0), sin(a0), cos(a0)); // Rotation
		float	a = i / seg * (2 * PI);
		p *= mat2(cos(a), -sin(a), sin(a), cos(a));	// Put segment horizontaly
		float	dst = 0;

		if (p.x > -size && p.x < size)
		{
			dst = abs(apot - p.y);
		}
		else if (p.x <= -size)
		{
			dst = length(vec2(-size, apot) - p);
		}
		else if (p.x >= size)
		{
			dst = length(vec2(size, apot) - p);
		}
		if (d == 0 && dst != 0)
			d = dst;
		else if (dst != 0)
			d = min(d, dst);
	}

	vec4 snakeCol = color( mod(0.3, 1.0) );

	float	col = 1 - pow(abs(d) * 15, 2);	// Glow factor
//		* (cos(time * 4 * PI) * 0.4 + 0.7);	// Time factor

	gl_FragColor = snakeCol * col;
}
