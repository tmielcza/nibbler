#version 120

uniform float time;
uniform vec2 coord;

vec4 color(int r, int g, int b, int a)
{
	return (vec4(r / 255.0, g / 255.0, b / 255.0, a / 255.0));
}

void main()
{
	float	PI = 3.14159265358979323846264;
	vec2	realPos = gl_FragCoord.xy - coord;
	vec2	pos = realPos;
	float	realL = length(realPos);
	float	l = length(realPos);
	float	a = 2.0;
	vec3	sphere = vec3(realPos.x / 15, realPos.y / 15, cos(l / 40 * PI));
	vec2	uv = vec2(0.5 + asin(sphere.x) / PI,
					  0.5 + asin(sphere.y) / PI);
	pos = uv;
	pos *= mat2(cos(a), -sin(a), sin(a), cos(a)); // rotation
	pos += vec2(sin(time * PI * 2), cos(time * PI * 2)) * 0.1; // movement
	pos *= 18; // scale
	pos.x = mod(pos.x, 5);
	pos.y = mod(pos.y, 5);
	vec2 fromCenter = pos - vec2(2.5, 2.5);
	float	tst = length(fromCenter);
	float	test = cos(time * 4 * PI) + 1.5;
	float	col = 1 - pow(abs(tst - 1.9) * 0.9, 2) * test;
	col = min(1, max(0, col));
	float	circle = 1 - pow(abs(realL - 15) * 0.2, 2) * (cos(time * 4 * PI) + 1.5);
	circle = min(1, max(0, circle));
	vec4	texCol = color(0xff, 0xed, 0x81, 0xff) * col;
	vec4	circleCol = color(0xff, 0xed, 0x81, 0xff) * circle;

	if (realL < 15)
		gl_FragColor = color(0xff, 0xed, 0x81, 0xff) * min(1, col + 0.2 / (15 - realL) * circle);
	else
		gl_FragColor = circleCol;
}
